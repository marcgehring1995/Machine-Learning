{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# imports\n",
    "# I was trying a lot of different things during this notebook therefore there might be the one or two libaries which\n",
    "# arn´t needed anymore\n",
    "\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "from pandas import ExcelWriter\n",
    "from pandas import ExcelFile\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import NullFormatter \n",
    "\n",
    "import datetime as dt\n",
    "from datetime import date\n",
    "from scipy import stats\n",
    "from plotly import tools\n",
    "import chart_studio.plotly as py\n",
    "import plotly.figure_factory as ff\n",
    "import plotly.tools as tls\n",
    "import plotly.graph_objs as go\n",
    "import warnings\n",
    "import seaborn as sns\n",
    "\n",
    "\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn import metrics \n",
    "from sklearn import preprocessing\n",
    "\n",
    "\n",
    "import json\n",
    "from time import sleep\n",
    "from datetime import datetime\n",
    "\n",
    "from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n",
    "init_notebook_mode(connected=True)\n",
    "import matplotlib\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import ListedColormap\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.datasets import make_moons, make_circles, make_classification\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.gaussian_process import GaussianProcessClassifier\n",
    "from sklearn.gaussian_process.kernels import RBF\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "\n",
    "from sklearn.model_selection import learning_curve, GridSearchCV\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import classification_report, confusion_matrix # confusion matrix\n",
    "from sklearn import metrics\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import xgboost as xgb\n",
    "from xgboost.sklearn import XGBClassifier\n",
    "from sklearn import  metrics   #Additional scklearn functions\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "import matplotlib.pylab as plt\n",
    "%matplotlib inline\n",
    "from matplotlib.pylab import rcParams\n",
    "import gc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pylab import rcParams\n",
    "\n",
    "rcParams['figure.figsize'] = 30, 30\n",
    "rcParams['font.size'] = 20\n",
    "rcParams['axes.facecolor'] = 'white'\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# plt.style.available\n",
    "plt.style.use(\"seaborn-whitegrid\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1  conda install -c anaconda lightgbm\n",
    "#   conda install -c conda-forge r-catboost\n",
    "\n",
    "# pip install lightgbm\n",
    "from sklearn import model_selection\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "\n",
    "import lightgbm as lgb\n",
    "import xgboost as xgb\n",
    "#from catboost import CatBoostRegressor\n",
    "\n",
    "from IPython.display import display # Allows the use of display() for DataFrames\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# if not installed: pip install bayesian-optimization\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import lightgbm as lgb\n",
    "from bayes_opt import BayesianOptimization\n",
    "from sklearn.datasets import load_boston\n",
    "from sklearn.metrics import r2_score\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data_train = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/datasets/Santander_train.csv') # Source: Kaggle\n",
    "data_test = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/datasets/Santander_test.csv') # Source: Kaggle\n",
    "\n",
    "sub = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/datasets/Santander_sample_submission.csv')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Bayesian optimization function to improove the values\n",
    "\n",
    "The idea is to optimize the general parameters. We need to get a feelding for out data, therefore we´ll let it run at the beginning with some general values\n",
    "\n",
    "inspiration: http://papers.nips.cc/paper/4522-practical-bayesian-optimization-of-machine-learning-algorithms.pdf![image.png](attachment:image.png) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We were implementing the Loight gbm but we had problems with our result. It looks like we have to use the log to get the needed results for the y values\n",
    "\n",
    "\n",
    "X_train = data_train.drop([\"ID\", \"target\"], axis=1)\n",
    "X_test = data_test.drop([\"ID\"], axis=1)\n",
    "y_train = np.log1p(data_train[\"target\"].values)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# splitting up the data for the light gbm \n",
    "dev_X, val_X, dev_y, val_y = train_test_split(X_train, y_train, test_size = 0.2, random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define R-squared\n",
    "def lgb_r2_score(preds, dtrain):\n",
    "    labels = dtrain.get_label()\n",
    "    return 'r2', r2_score(labels, preds), True\n",
    "    \n",
    "dtrain = lgb.Dataset(data=X_train, label=y_train)\n",
    "\n",
    "\n",
    "def hyp_lgbm(num_leaves, feature_fraction, bagging_fraction, max_depth, min_split_gain, min_child_weight):\n",
    "      \n",
    "        params = {'application':'regression','num_iterations': 100,\n",
    "                  'learning_rate':0.05, 'early_stopping_round':50,\n",
    "                  'metric':'lgb_r2_score'} # Default parameters\n",
    "        params[\"num_leaves\"] = int(round(num_leaves))\n",
    "        params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n",
    "        params['bagging_fraction'] = max(min(bagging_fraction, 1), 0)\n",
    "        params['max_depth'] = int(round(max_depth))\n",
    "        params['min_split_gain'] = min_split_gain\n",
    "        params['min_child_weight'] = min_child_weight\n",
    "        cv_results = lgb.cv(params, dtrain, nfold=5, seed=17,categorical_feature=[], stratified=False,\n",
    "                            verbose_eval =None, feval=lgb_r2_score)\n",
    "\n",
    "        return np.max(cv_results['r2-mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# here we can optimize our parameters\n",
    "\n",
    "pds = {'num_leaves': (45, 60),\n",
    "          'feature_fraction': (0.1, 0.9),\n",
    "          'bagging_fraction': (0.8, 1),\n",
    "          'max_depth': (9, 13 ),\n",
    "          'min_split_gain': (0.001, 0.1),\n",
    "          'min_child_weight': (30, 50)\n",
    "          }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   iter    |  target   | baggin... | featur... | max_depth | min_ch... | min_sp... | num_le... |\n",
      "-------------------------------------------------------------------------------------------------\n",
      "| \u001b[0m 1       \u001b[0m | \u001b[0m 0.3191  \u001b[0m | \u001b[0m 0.8153  \u001b[0m | \u001b[0m 0.7239  \u001b[0m | \u001b[0m 10.75   \u001b[0m | \u001b[0m 44.47   \u001b[0m | \u001b[0m 0.09782 \u001b[0m | \u001b[0m 53.08   \u001b[0m |\n",
      "| \u001b[0m 2       \u001b[0m | \u001b[0m 0.3175  \u001b[0m | \u001b[0m 0.9002  \u001b[0m | \u001b[0m 0.1576  \u001b[0m | \u001b[0m 10.07   \u001b[0m | \u001b[0m 40.0    \u001b[0m | \u001b[0m 0.06824 \u001b[0m | \u001b[0m 57.06   \u001b[0m |\n",
      "| \u001b[95m 3       \u001b[0m | \u001b[95m 0.3196  \u001b[0m | \u001b[95m 0.8762  \u001b[0m | \u001b[95m 0.1527  \u001b[0m | \u001b[95m 10.15   \u001b[0m | \u001b[95m 48.19   \u001b[0m | \u001b[95m 0.02213 \u001b[0m | \u001b[95m 51.78   \u001b[0m |\n",
      "| \u001b[0m 4       \u001b[0m | \u001b[0m 0.3175  \u001b[0m | \u001b[0m 0.9862  \u001b[0m | \u001b[0m 0.1199  \u001b[0m | \u001b[0m 11.4    \u001b[0m | \u001b[0m 49.0    \u001b[0m | \u001b[0m 0.0238  \u001b[0m | \u001b[0m 53.23   \u001b[0m |\n",
      "| \u001b[95m 5       \u001b[0m | \u001b[95m 0.3235  \u001b[0m | \u001b[95m 0.9818  \u001b[0m | \u001b[95m 0.2065  \u001b[0m | \u001b[95m 11.09   \u001b[0m | \u001b[95m 45.01   \u001b[0m | \u001b[95m 0.06723 \u001b[0m | \u001b[95m 52.02   \u001b[0m |\n",
      "| \u001b[95m 6       \u001b[0m | \u001b[95m 0.3266  \u001b[0m | \u001b[95m 0.8073  \u001b[0m | \u001b[95m 0.1808  \u001b[0m | \u001b[95m 12.76   \u001b[0m | \u001b[95m 30.14   \u001b[0m | \u001b[95m 0.02735 \u001b[0m | \u001b[95m 45.06   \u001b[0m |\n",
      "| \u001b[0m 7       \u001b[0m | \u001b[0m 0.3206  \u001b[0m | \u001b[0m 0.94    \u001b[0m | \u001b[0m 0.3149  \u001b[0m | \u001b[0m 9.255   \u001b[0m | \u001b[0m 30.21   \u001b[0m | \u001b[0m 0.06564 \u001b[0m | \u001b[0m 45.01   \u001b[0m |\n",
      "| \u001b[0m 8       \u001b[0m | \u001b[0m 0.3225  \u001b[0m | \u001b[0m 0.8364  \u001b[0m | \u001b[0m 0.1088  \u001b[0m | \u001b[0m 12.9    \u001b[0m | \u001b[0m 43.48   \u001b[0m | \u001b[0m 0.01981 \u001b[0m | \u001b[0m 45.01   \u001b[0m |\n",
      "| \u001b[0m 9       \u001b[0m | \u001b[0m 0.3164  \u001b[0m | \u001b[0m 0.9623  \u001b[0m | \u001b[0m 0.8998  \u001b[0m | \u001b[0m 12.9    \u001b[0m | \u001b[0m 30.4    \u001b[0m | \u001b[0m 0.06131 \u001b[0m | \u001b[0m 45.11   \u001b[0m |\n",
      "| \u001b[0m 10      \u001b[0m | \u001b[0m 0.3191  \u001b[0m | \u001b[0m 0.8     \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 12.46   \u001b[0m | \u001b[0m 30.0    \u001b[0m | \u001b[0m 0.001   \u001b[0m | \u001b[0m 56.66   \u001b[0m |\n",
      "| \u001b[0m 11      \u001b[0m | \u001b[0m 0.3213  \u001b[0m | \u001b[0m 0.814   \u001b[0m | \u001b[0m 0.1144  \u001b[0m | \u001b[0m 12.62   \u001b[0m | \u001b[0m 35.8    \u001b[0m | \u001b[0m 0.0362  \u001b[0m | \u001b[0m 50.15   \u001b[0m |\n",
      "| \u001b[0m 12      \u001b[0m | \u001b[0m 0.3238  \u001b[0m | \u001b[0m 0.8176  \u001b[0m | \u001b[0m 0.173   \u001b[0m | \u001b[0m 12.99   \u001b[0m | \u001b[0m 41.96   \u001b[0m | \u001b[0m 0.08996 \u001b[0m | \u001b[0m 59.56   \u001b[0m |\n",
      "| \u001b[0m 13      \u001b[0m | \u001b[0m 0.3172  \u001b[0m | \u001b[0m 0.9399  \u001b[0m | \u001b[0m 0.1354  \u001b[0m | \u001b[0m 9.058   \u001b[0m | \u001b[0m 42.15   \u001b[0m | \u001b[0m 0.06578 \u001b[0m | \u001b[0m 45.62   \u001b[0m |\n",
      "| \u001b[0m 14      \u001b[0m | \u001b[0m 0.3211  \u001b[0m | \u001b[0m 0.8461  \u001b[0m | \u001b[0m 0.1014  \u001b[0m | \u001b[0m 12.97   \u001b[0m | \u001b[0m 44.08   \u001b[0m | \u001b[0m 0.06478 \u001b[0m | \u001b[0m 51.99   \u001b[0m |\n",
      "| \u001b[0m 15      \u001b[0m | \u001b[0m 0.3192  \u001b[0m | \u001b[0m 0.9353  \u001b[0m | \u001b[0m 0.4666  \u001b[0m | \u001b[0m 9.054   \u001b[0m | \u001b[0m 49.85   \u001b[0m | \u001b[0m 0.08073 \u001b[0m | \u001b[0m 60.0    \u001b[0m |\n",
      "| \u001b[0m 16      \u001b[0m | \u001b[0m 0.3208  \u001b[0m | \u001b[0m 0.8923  \u001b[0m | \u001b[0m 0.1118  \u001b[0m | \u001b[0m 12.65   \u001b[0m | \u001b[0m 48.27   \u001b[0m | \u001b[0m 0.006891\u001b[0m | \u001b[0m 59.88   \u001b[0m |\n",
      "| \u001b[0m 17      \u001b[0m | \u001b[0m 0.3224  \u001b[0m | \u001b[0m 0.8628  \u001b[0m | \u001b[0m 0.1092  \u001b[0m | \u001b[0m 12.94   \u001b[0m | \u001b[0m 30.04   \u001b[0m | \u001b[0m 0.07888 \u001b[0m | \u001b[0m 50.25   \u001b[0m |\n",
      "| \u001b[0m 18      \u001b[0m | \u001b[0m 0.3237  \u001b[0m | \u001b[0m 0.8251  \u001b[0m | \u001b[0m 0.1124  \u001b[0m | \u001b[0m 12.3    \u001b[0m | \u001b[0m 30.09   \u001b[0m | \u001b[0m 0.06509 \u001b[0m | \u001b[0m 45.08   \u001b[0m |\n",
      "| \u001b[0m 19      \u001b[0m | \u001b[0m 0.3217  \u001b[0m | \u001b[0m 0.8643  \u001b[0m | \u001b[0m 0.1075  \u001b[0m | \u001b[0m 12.97   \u001b[0m | \u001b[0m 35.17   \u001b[0m | \u001b[0m 0.0998  \u001b[0m | \u001b[0m 45.28   \u001b[0m |\n",
      "| \u001b[0m 20      \u001b[0m | \u001b[0m 0.3169  \u001b[0m | \u001b[0m 0.8116  \u001b[0m | \u001b[0m 0.1415  \u001b[0m | \u001b[0m 9.046   \u001b[0m | \u001b[0m 46.12   \u001b[0m | \u001b[0m 0.0822  \u001b[0m | \u001b[0m 59.84   \u001b[0m |\n",
      "=================================================================================================\n"
     ]
    }
   ],
   "source": [
    "\n",
    "optimizer = BayesianOptimization(hyp_lgbm,pds,random_state=7)\n",
    "                                  \n",
    "\n",
    "optimizer.maximize(init_points=5, n_iter=15)\n",
    "\n",
    "#n_iter: How many steps of bayesian optimization you want to perform. The more steps the more likely to find a good maximum you are.\n",
    "#init_points: How many steps of random exploration you want to perform. Random exploration can help by diversifying the exploration space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bagging_fraction': 0.8072574124060921,\n",
       " 'feature_fraction': 0.18078141341147103,\n",
       " 'max_depth': 12.755270584069136,\n",
       " 'min_child_weight': 30.140033300538796,\n",
       " 'min_split_gain': 0.02734712675336803,\n",
       " 'num_leaves': 45.06287267201995}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimizer.max['params']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final1: Evaluation and Optimization of the Lightgbm without sparse Data\n",
    "first we use our optimized dataset with the sparse data and second we check if we can improve sth with the sparse dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " To evaluate or key parameters, we have to use the Bayesian optimization. it seems like a lot of people we´re trying the Gridsearch CV, but this only works with a binary result. We don´t have it here. There is no column that tells us, write or wrong. Therefore we are trying to work with a Bayesian optimization function to optimize the different Hyperparameters of the Lightgbm. We Used a baysian Optimization model and for the beginning Parameters we used a range around the average/default values and tried to determine the best value. There is a wide range of different parameters that we can tune. With the topic we got from Santander and their Feautures it is hard to imagine what is the important information behind a feauture, therefore we have to play around with the different Parameters. \n",
    "\n",
    "\n",
    "Bayesian optimization function takes 3 inputs: Objective Function , Search Space , and random_state .\n",
    "\n",
    "\n",
    "\n",
    "Inspiration:\n",
    "https://medium.com/analytics-vidhya/hyperparameters-optimization-for-lightgbm-catboost-and-xgboost-regressors-using-bayesian-6e7c495947a9\n",
    "\n",
    "Further Inspiration:\n",
    "https://pubs.acs.org/doi/abs/10.1021/acs.jcim.9b00633 \n",
    "\n",
    "General explanaition of Bayesian optimization\n",
    "http://papers.nips.cc/paper/4522-practical-bayesian-optimization-of-machine-learning-algorithms.pdf\n",
    "\n",
    "https://towardsdatascience.com/a-conceptual-explanation-of-bayesian-model-based-hyperparameter-optimization-for-machine-learning-b8172278050f \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First reading in the Data, this is the dataset without the improovement of sparse Data\n",
    "\n",
    "data_train2 = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/notebooks/Santander_AS2_train_adj_complete_featureselection.csv') # Source: Kaggle\n",
    "data_test2 = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/notebooks/Santander_AS2_test_adj_complete_featureselection.csv') # Source: Kaggle\n",
    "sub = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/datasets/Santander_sample_submission.csv')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_train = data_train2\n",
    "data_test = data_test2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "X_train = data_train.drop([\"ID\", \"target\"], axis=1)\n",
    "X_test = data_test.drop([\"ID\"], axis=1)\n",
    "y_train = np.log1p(data_train[\"target\"].values)\n",
    "\n",
    "# splitting up the data for the light gbm \n",
    "tr_X, val_X, tr_y, val_y = train_test_split(X_train, y_train, test_size = 0.2, random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   iter    |  target   | baggin... | baggin... | featur... | max_depth | min_ch... | min_sp... | num_le... |\n",
      "-------------------------------------------------------------------------------------------------------------\n",
      "| \u001b[0m 1       \u001b[0m | \u001b[0m 0.2387  \u001b[0m | \u001b[0m 0.9676  \u001b[0m | \u001b[0m 8.569   \u001b[0m | \u001b[0m 0.8261  \u001b[0m | \u001b[0m 12.09   \u001b[0m | \u001b[0m 11.31   \u001b[0m | \u001b[0m 0.07901 \u001b[0m | \u001b[0m 59.57   \u001b[0m |\n",
      "| \u001b[95m 2       \u001b[0m | \u001b[95m 0.2499  \u001b[0m | \u001b[95m 0.8164  \u001b[0m | \u001b[95m 6.961   \u001b[0m | \u001b[95m 0.7636  \u001b[0m | \u001b[95m 16.01   \u001b[0m | \u001b[95m 20.73   \u001b[0m | \u001b[95m 0.08383 \u001b[0m | \u001b[95m 75.31   \u001b[0m |\n",
      "| \u001b[0m 3       \u001b[0m | \u001b[0m 0.2485  \u001b[0m | \u001b[0m 0.7185  \u001b[0m | \u001b[0m 7.124   \u001b[0m | \u001b[0m 0.8117  \u001b[0m | \u001b[0m 16.34   \u001b[0m | \u001b[0m 10.86   \u001b[0m | \u001b[0m 0.07496 \u001b[0m | \u001b[0m 67.14   \u001b[0m |\n",
      "| \u001b[0m 4       \u001b[0m | \u001b[0m 0.2366  \u001b[0m | \u001b[0m 0.6703  \u001b[0m | \u001b[0m 6.198   \u001b[0m | \u001b[0m 0.6877  \u001b[0m | \u001b[0m 11.0    \u001b[0m | \u001b[0m 21.27   \u001b[0m | \u001b[0m 0.007313\u001b[0m | \u001b[0m 65.91   \u001b[0m |\n",
      "| \u001b[0m 5       \u001b[0m | \u001b[0m 0.2489  \u001b[0m | \u001b[0m 0.7457  \u001b[0m | \u001b[0m 6.608   \u001b[0m | \u001b[0m 0.764   \u001b[0m | \u001b[0m 16.65   \u001b[0m | \u001b[0m 10.54   \u001b[0m | \u001b[0m 0.08247 \u001b[0m | \u001b[0m 56.4    \u001b[0m |\n",
      "| \u001b[0m 6       \u001b[0m | \u001b[0m 0.2461  \u001b[0m | \u001b[0m 0.7498  \u001b[0m | \u001b[0m 9.35    \u001b[0m | \u001b[0m 0.8479  \u001b[0m | \u001b[0m 24.92   \u001b[0m | \u001b[0m 24.69   \u001b[0m | \u001b[0m 0.04604 \u001b[0m | \u001b[0m 40.1    \u001b[0m |\n",
      "| \u001b[95m 7       \u001b[0m | \u001b[95m 0.2575  \u001b[0m | \u001b[95m 0.8085  \u001b[0m | \u001b[95m 6.147   \u001b[0m | \u001b[95m 0.7425  \u001b[0m | \u001b[95m 24.82   \u001b[0m | \u001b[95m 12.09   \u001b[0m | \u001b[95m 0.06409 \u001b[0m | \u001b[95m 99.46   \u001b[0m |\n",
      "| \u001b[0m 8       \u001b[0m | \u001b[0m 0.2556  \u001b[0m | \u001b[0m 0.6672  \u001b[0m | \u001b[0m 9.935   \u001b[0m | \u001b[0m 0.6267  \u001b[0m | \u001b[0m 24.81   \u001b[0m | \u001b[0m 24.69   \u001b[0m | \u001b[0m 0.01575 \u001b[0m | \u001b[0m 92.85   \u001b[0m |\n",
      "| \u001b[0m 9       \u001b[0m | \u001b[0m 0.2541  \u001b[0m | \u001b[0m 0.9744  \u001b[0m | \u001b[0m 6.062   \u001b[0m | \u001b[0m 0.8303  \u001b[0m | \u001b[0m 24.98   \u001b[0m | \u001b[0m 12.66   \u001b[0m | \u001b[0m 0.07117 \u001b[0m | \u001b[0m 68.17   \u001b[0m |\n",
      "| \u001b[0m 10      \u001b[0m | \u001b[0m 0.234   \u001b[0m | \u001b[0m 0.7955  \u001b[0m | \u001b[0m 7.084   \u001b[0m | \u001b[0m 0.6604  \u001b[0m | \u001b[0m 10.11   \u001b[0m | \u001b[0m 23.81   \u001b[0m | \u001b[0m 0.08947 \u001b[0m | \u001b[0m 99.89   \u001b[0m |\n",
      "| \u001b[0m 11      \u001b[0m | \u001b[0m 0.2462  \u001b[0m | \u001b[0m 0.7934  \u001b[0m | \u001b[0m 6.001   \u001b[0m | \u001b[0m 0.6706  \u001b[0m | \u001b[0m 24.06   \u001b[0m | \u001b[0m 10.43   \u001b[0m | \u001b[0m 0.01614 \u001b[0m | \u001b[0m 40.16   \u001b[0m |\n",
      "| \u001b[0m 12      \u001b[0m | \u001b[0m 0.2552  \u001b[0m | \u001b[0m 0.6233  \u001b[0m | \u001b[0m 6.034   \u001b[0m | \u001b[0m 0.8155  \u001b[0m | \u001b[0m 24.25   \u001b[0m | \u001b[0m 24.38   \u001b[0m | \u001b[0m 0.07454 \u001b[0m | \u001b[0m 98.23   \u001b[0m |\n",
      "| \u001b[0m 13      \u001b[0m | \u001b[0m 0.2533  \u001b[0m | \u001b[0m 0.6394  \u001b[0m | \u001b[0m 6.084   \u001b[0m | \u001b[0m 0.7416  \u001b[0m | \u001b[0m 24.92   \u001b[0m | \u001b[0m 24.69   \u001b[0m | \u001b[0m 0.07671 \u001b[0m | \u001b[0m 76.49   \u001b[0m |\n",
      "| \u001b[0m 14      \u001b[0m | \u001b[0m 0.2547  \u001b[0m | \u001b[0m 0.6268  \u001b[0m | \u001b[0m 6.177   \u001b[0m | \u001b[0m 0.8981  \u001b[0m | \u001b[0m 24.64   \u001b[0m | \u001b[0m 12.04   \u001b[0m | \u001b[0m 0.01924 \u001b[0m | \u001b[0m 87.98   \u001b[0m |\n",
      "| \u001b[0m 15      \u001b[0m | \u001b[0m 0.2512  \u001b[0m | \u001b[0m 0.6333  \u001b[0m | \u001b[0m 9.94    \u001b[0m | \u001b[0m 0.6454  \u001b[0m | \u001b[0m 24.87   \u001b[0m | \u001b[0m 10.93   \u001b[0m | \u001b[0m 0.03384 \u001b[0m | \u001b[0m 53.44   \u001b[0m |\n",
      "=============================================================================================================\n"
     ]
    }
   ],
   "source": [
    "#Inspiration: https://medium.com/analytics-vidhya/hyperparameters-optimization-for-lightgbm-catboost-and-xgboost-regressors-using-bayesian-6e7c495947a9\n",
    "\n",
    "def bayesion_opt_lgbm(X_train, y_train, init_iter=3, n_iters=7, random_state=11, seed = 42, num_iterations = 100):\n",
    "  dtrain = lgb.Dataset(data=X_train, label=y_train)\n",
    "  def lgb_r2_score(preds, dtrain):\n",
    "      labels = dtrain.get_label()\n",
    "      return 'r2', r2_score(labels, preds), True\n",
    "  \n",
    "  def hyp_lgbm(num_leaves, feature_fraction, bagging_fraction, max_depth, min_split_gain, min_child_weight,bagging_frequency):\n",
    "        \n",
    "          params = {'application':'regression','num_iterations': num_iterations,\n",
    "                 'learning_rate': 0.005, 'early_stopping_round':50,\n",
    "                    'metric':'lgb_r2_score'} # Default parameters\n",
    "          params[\"num_leaves\"] = int(round(num_leaves))\n",
    "          params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n",
    "          params['bagging_fraction'] = max(min(bagging_fraction, 1), 0)\n",
    "          params['max_depth'] = int(round(max_depth))\n",
    "          params['min_split_gain'] = min_split_gain\n",
    "          params['min_child_weight'] = min_child_weight    #ab hier \n",
    "          params['bagging_frequency'] = bagging_frequency  \n",
    "          \n",
    "            \n",
    "          cv_results = lgb.cv(params, dtrain, nfold=5, seed=seed,categorical_feature=[], stratified=False,\n",
    "                              verbose_eval =None, feval=lgb_r2_score)\n",
    "          \n",
    "          return np.max(cv_results['r2-mean'])\n",
    "  \n",
    "\n",
    "\n",
    "  pds = {'num_leaves': (40, 100),\n",
    "            'feature_fraction': (0.6, 0.9),\n",
    "            'bagging_fraction': (0.6, 1),\n",
    "            'max_depth': (10, 25),\n",
    "            'min_split_gain': (0.001, 0.1),\n",
    "            'min_child_weight': (10, 25),      \n",
    "            'bagging_frequency': (6, 10)\n",
    "            \n",
    "            }\n",
    "\n",
    "  \n",
    "  optimizer = BayesianOptimization(hyp_lgbm, pds, random_state=random_state)\n",
    "                                    \n",
    "\n",
    "  optimizer.maximize(init_points=init_iter, n_iter=n_iters)\n",
    "\n",
    "bayesion_opt_lgbm(X_train, y_train, init_iter=5, n_iters=10, random_state=77, seed = 42, num_iterations = 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 0: \n",
      "\t{'target': 0.31909898226765415, 'params': {'bagging_fraction': 0.8152616578747914, 'feature_fraction': 0.7239350337920917, 'max_depth': 10.753636925763574, 'min_child_weight': 44.469303556618826, 'min_split_gain': 0.09782096168766367, 'num_leaves': 53.07743805615651}}\n",
      "Iteration 1: \n",
      "\t{'target': 0.3175442548613967, 'params': {'bagging_fraction': 0.9002240927319876, 'feature_fraction': 0.15764090668780925, 'max_depth': 10.073755920407486, 'min_child_weight': 39.9976500165112, 'min_split_gain': 0.06824376961597312, 'num_leaves': 57.056085541565636}}\n",
      "Iteration 2: \n",
      "\t{'target': 0.31959265651242885, 'params': {'bagging_fraction': 0.8761882266297077, 'feature_fraction': 0.1527490775247241, 'max_depth': 10.152582397231974, 'min_child_weight': 48.191870554392274, 'min_split_gain': 0.022125150004411637, 'num_leaves': 51.781859427265246}}\n",
      "Iteration 3: \n",
      "\t{'target': 0.317489671556908, 'params': {'bagging_fraction': 0.9862412039378043, 'feature_fraction': 0.11991938204027841, 'max_depth': 11.40219566985649, 'min_child_weight': 49.00259000827291, 'min_split_gain': 0.023799985023075516, 'num_leaves': 53.22734878854045}}\n",
      "Iteration 4: \n",
      "\t{'target': 0.32353786748866076, 'params': {'bagging_fraction': 0.9818256749773463, 'feature_fraction': 0.20653555660740014, 'max_depth': 11.093650322695064, 'min_child_weight': 45.008197182040696, 'min_split_gain': 0.06723231084750747, 'num_leaves': 52.01629289617471}}\n",
      "Iteration 5: \n",
      "\t{'target': 0.32659276981569135, 'params': {'bagging_fraction': 0.8072574124060921, 'feature_fraction': 0.18078141341147103, 'max_depth': 12.755270584069136, 'min_child_weight': 30.140033300538796, 'min_split_gain': 0.02734712675336803, 'num_leaves': 45.06287267201995}}\n",
      "Iteration 6: \n",
      "\t{'target': 0.3206073998965822, 'params': {'bagging_fraction': 0.939967545847018, 'feature_fraction': 0.3148774634127739, 'max_depth': 9.255264859712513, 'min_child_weight': 30.2149662664427, 'min_split_gain': 0.06564192745923, 'num_leaves': 45.01152482415236}}\n",
      "Iteration 7: \n",
      "\t{'target': 0.3224983583747959, 'params': {'bagging_fraction': 0.8364493921800473, 'feature_fraction': 0.1087904507242187, 'max_depth': 12.896031278985266, 'min_child_weight': 43.48336915448099, 'min_split_gain': 0.01980509399250119, 'num_leaves': 45.01307438700707}}\n",
      "Iteration 8: \n",
      "\t{'target': 0.3163969692522185, 'params': {'bagging_fraction': 0.9622785497549442, 'feature_fraction': 0.8998234364960281, 'max_depth': 12.899520520790933, 'min_child_weight': 30.40312465946861, 'min_split_gain': 0.06130693154988564, 'num_leaves': 45.1079705829936}}\n",
      "Iteration 9: \n",
      "\t{'target': 0.31908381381794476, 'params': {'bagging_fraction': 0.8000000009325253, 'feature_fraction': 0.10000000033893883, 'max_depth': 12.456985214427254, 'min_child_weight': 30.000000000789033, 'min_split_gain': 0.001, 'num_leaves': 56.65549721742221}}\n",
      "Iteration 10: \n",
      "\t{'target': 0.32126459240578975, 'params': {'bagging_fraction': 0.8139641759278209, 'feature_fraction': 0.11444028786700802, 'max_depth': 12.61587296726356, 'min_child_weight': 35.79952242676893, 'min_split_gain': 0.036204651904358384, 'num_leaves': 50.148387725317754}}\n",
      "Iteration 11: \n",
      "\t{'target': 0.32380762665530805, 'params': {'bagging_fraction': 0.8175779645473907, 'feature_fraction': 0.1729846830916456, 'max_depth': 12.987610429580087, 'min_child_weight': 41.96088215198937, 'min_split_gain': 0.08995613713092299, 'num_leaves': 59.564116258993565}}\n",
      "Iteration 12: \n",
      "\t{'target': 0.31719278530664896, 'params': {'bagging_fraction': 0.9398611213483735, 'feature_fraction': 0.1354475128813377, 'max_depth': 9.057803801810701, 'min_child_weight': 42.15060635049488, 'min_split_gain': 0.06577861429368384, 'num_leaves': 45.61796027607902}}\n",
      "Iteration 13: \n",
      "\t{'target': 0.3210966408531208, 'params': {'bagging_fraction': 0.846080092482605, 'feature_fraction': 0.10135502414878293, 'max_depth': 12.971367739262389, 'min_child_weight': 44.078575906130226, 'min_split_gain': 0.06477734501898359, 'num_leaves': 51.988739364353975}}\n",
      "Iteration 14: \n",
      "\t{'target': 0.3191626786902188, 'params': {'bagging_fraction': 0.93532617186087, 'feature_fraction': 0.4666347697079547, 'max_depth': 9.053696977399394, 'min_child_weight': 49.84975032497114, 'min_split_gain': 0.08073371481772959, 'num_leaves': 59.99996378982698}}\n",
      "Iteration 15: \n",
      "\t{'target': 0.3207519217967434, 'params': {'bagging_fraction': 0.8922924973635824, 'feature_fraction': 0.11176899061681721, 'max_depth': 12.64846965113272, 'min_child_weight': 48.26718369249667, 'min_split_gain': 0.006891013743871583, 'num_leaves': 59.879341510097504}}\n",
      "Iteration 16: \n",
      "\t{'target': 0.32236112659850263, 'params': {'bagging_fraction': 0.8628439584362441, 'feature_fraction': 0.10918971861581808, 'max_depth': 12.936435715393943, 'min_child_weight': 30.043154813003753, 'min_split_gain': 0.07888498388582581, 'num_leaves': 50.247456582589834}}\n",
      "Iteration 17: \n",
      "\t{'target': 0.32370068312258227, 'params': {'bagging_fraction': 0.825060201157516, 'feature_fraction': 0.11237712992278209, 'max_depth': 12.296723919448759, 'min_child_weight': 30.089642648336877, 'min_split_gain': 0.06509270147593739, 'num_leaves': 45.08039517152133}}\n",
      "Iteration 18: \n",
      "\t{'target': 0.3216927529967224, 'params': {'bagging_fraction': 0.864304529532301, 'feature_fraction': 0.10750913418799675, 'max_depth': 12.974749015649882, 'min_child_weight': 35.16602057402304, 'min_split_gain': 0.09979699172268475, 'num_leaves': 45.27843177343654}}\n",
      "Iteration 19: \n",
      "\t{'target': 0.3169035583712721, 'params': {'bagging_fraction': 0.8115788250269986, 'feature_fraction': 0.14150039160282743, 'max_depth': 9.04619001719588, 'min_child_weight': 46.115913977825585, 'min_split_gain': 0.08220490845598707, 'num_leaves': 59.84497892729853}}\n"
     ]
    }
   ],
   "source": [
    "# First result we got out of our optimization model: \n",
    "# We use this to evaluate the different Parameters after each iteration round\n",
    "#idea: https://github.com/fmfn/BayesianOptimization\n",
    "# https://medium.com/datadriveninvestor/overview-of-different-optimizers-for-neural-networks-e0ed119440c3\n",
    "for i, res in enumerate(optimizer.res):\n",
    "    print(\"Iteration {}: \\n\\t{}\".format(i, res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bagging_fraction': 0.8072574124060921,\n",
       " 'feature_fraction': 0.18078141341147103,\n",
       " 'max_depth': 12.755270584069136,\n",
       " 'min_child_weight': 30.140033300538796,\n",
       " 'min_split_gain': 0.02734712675336803,\n",
       " 'num_leaves': 45.06287267201995}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to simplify the choice out of all the different parameters we are using the following, which will give us the best result\n",
    "optimizer.max['params']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluation of the different Parameters: \n",
    "https://testlightgbm.readthedocs.io/en/latest/Parameters-tuning.html\n",
    "\n",
    "https://buildmedia.readthedocs.org/media/pdf/lightgbm/latest/lightgbm.pdf \n",
    "1. num_leaves: This parameter is being used to describe the complexity of the tree model. A usual value is between 31- 127. The problem of choosing the value to smalle and a to high max_depth is the risk of overfitting. This is a general problem of the light gbm. Its fast in performance but tends to overfit. Therefore 45 is a moderate values\n",
    "\n",
    "2. max_depth: The values of Max_depth seem to be pretty high, but when we take the amout of feautures we are taking into consideration we are using a higher value because this value should be usually in relationship to the amout of feautures you are slecting. With a few 1000 feautures we are looking at the value of 12-13 is still super low. \n",
    "\n",
    "3. feature_fraction: Heauture Fraction is by default 1. \"LightGBM will random select part of features on each iteration if feature_fraction smaller than 1.0. For example, if set to 0.8, will select 80% features before training each tree.Can use this to speed up training.Can use this to deal with over-fit\". The really low value cannot be explanied though\n",
    "\n",
    "4. bagging_fraction: Also a Parameter that we can use to improve the speed of our algorithm. Becuase we had problems with the XG-Boost we really have to make a algorithm work that can deal with this huge amount of feautures. Therfore a value below 1. 0.8 was choosen from the basayan model as the best parameter. \n",
    "\n",
    "5. min_split_gain: \"Minimumlossreduction required to make a further partition on a leaf node of the tree.\" By default 0, we have a slightly increased value \n",
    "\n",
    "6. min_child_weight: \"Minimum sum of instance weight (hessian) needed in a child (leaf).\"\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# now we can set our parameters down for the evaluation \n",
    "params = {\n",
    "        \"objective\" : \"regression\",\n",
    "        \"metric\" : \"rmse\",\n",
    "        \"learning_rate\" : 0.005,\n",
    "        \"num_leaves\" : 45,              \n",
    "        \"bagging_fraction\" : 0.8,       \n",
    "        \"feature_fraction\" : 0.18078141341147103,       \n",
    "        \"bagging_frequency\" : 6,        \n",
    "        \"bagging_seed\" : 42,\n",
    "        'max_depth': 13,\n",
    "        'min_split_gain':0.02734712675336803,\n",
    "        'min_child_weight':30\n",
    "    }  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgb_training = lgb.Dataset(tr_X, label=tr_y)\n",
    "lgb_validation = lgb.Dataset(val_X, label=val_y)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 500 rounds.\n",
      "[150]\ttraining's rmse: 1.50877\tvalid_1's rmse: 1.52811\n",
      "[300]\ttraining's rmse: 1.36301\tvalid_1's rmse: 1.45518\n",
      "[450]\ttraining's rmse: 1.27025\tvalid_1's rmse: 1.42317\n",
      "[600]\ttraining's rmse: 1.20879\tvalid_1's rmse: 1.41119\n",
      "[750]\ttraining's rmse: 1.15827\tvalid_1's rmse: 1.40663\n",
      "[900]\ttraining's rmse: 1.11865\tvalid_1's rmse: 1.40531\n",
      "[1050]\ttraining's rmse: 1.08673\tvalid_1's rmse: 1.40563\n",
      "[1200]\ttraining's rmse: 1.05975\tvalid_1's rmse: 1.40656\n",
      "[1350]\ttraining's rmse: 1.03566\tvalid_1's rmse: 1.40743\n",
      "Early stopping, best iteration is:\n",
      "[976]\ttraining's rmse: 1.10206\tvalid_1's rmse: 1.40497\n"
     ]
    }
   ],
   "source": [
    "evals_result = {}\n",
    "model = lgb.train(params, lgb_training, num_boost_round=4000, \n",
    "                      valid_sets=[lgb_training, lgb_validation], \n",
    "                      early_stopping_rounds=500, \n",
    "                      verbose_eval=150, \n",
    "                      evals_result=evals_result)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction_lgbt = np.expm1(model.predict(X_test, num_iteration=model.best_iteration)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>000137c73</td>\n",
       "      <td>1.877875e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>00021489f</td>\n",
       "      <td>1.924653e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0004d7953</td>\n",
       "      <td>4.042727e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>00056a333</td>\n",
       "      <td>6.384723e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>00056d8eb</td>\n",
       "      <td>1.924653e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff73b677</td>\n",
       "      <td>1.801985e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff7b5923</td>\n",
       "      <td>6.280993e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff7c698f</td>\n",
       "      <td>1.849742e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff8dba89</td>\n",
       "      <td>6.045457e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fffbe2f6f</td>\n",
       "      <td>1.933925e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>49342 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 target\n",
       "ID                     \n",
       "000137c73  1.877875e+06\n",
       "00021489f  1.924653e+06\n",
       "0004d7953  4.042727e+06\n",
       "00056a333  6.384723e+06\n",
       "00056d8eb  1.924653e+06\n",
       "...                 ...\n",
       "fff73b677  1.801985e+06\n",
       "fff7b5923  6.280993e+06\n",
       "fff7c698f  1.849742e+06\n",
       "fff8dba89  6.045457e+05\n",
       "fffbe2f6f  1.933925e+06\n",
       "\n",
       "[49342 rows x 1 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_2 = sub\n",
    "sub_2['target'] = prediction_lgbt\n",
    "sub_2 = sub_2.set_index('ID')\n",
    "sub_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub_2.to_csv('Santander_sub7.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluation with Sparse Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_train3 = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/notebooks/Santander_AS2_train_adj_complete_featureselection_sparse.csv') # Source: Kaggle\n",
    "data_test3 = pd.read_csv('/Users/marcgehring/Desktop/Massey IT/158333/notebooks/Santander_AS2_test_adj_complete_featureselection_sparse.csv') # Source: Kaggle\n",
    "data_train = data_train3\n",
    "data_test = data_test3\n",
    "\n",
    "X_train = data_train.drop([\"ID\", \"target\"], axis=1)\n",
    "X_test = data_test.drop([\"ID\"], axis=1)\n",
    "y_train = np.log1p(data_train[\"target\"].values)\n",
    "\n",
    "# splitting up the data for the light gbm \n",
    "dev_X, val_X, dev_y, val_y = train_test_split(X_train, y_train, test_size = 0.2, random_state = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   iter    |  target   | baggin... | baggin... | featur... | max_depth | min_ch... | min_sp... | num_le... |\n",
      "-------------------------------------------------------------------------------------------------------------\n",
      "| \u001b[0m 1       \u001b[0m | \u001b[0m 0.2083  \u001b[0m | \u001b[0m 0.9272  \u001b[0m | \u001b[0m 8.569   \u001b[0m | \u001b[0m 0.7783  \u001b[0m | \u001b[0m 5.09    \u001b[0m | \u001b[0m 11.31   \u001b[0m | \u001b[0m 0.07901 \u001b[0m | \u001b[0m 55.88   \u001b[0m |\n",
      "| \u001b[95m 2       \u001b[0m | \u001b[95m 0.2393  \u001b[0m | \u001b[95m 0.587   \u001b[0m | \u001b[95m 6.961   \u001b[0m | \u001b[95m 0.5909  \u001b[0m | \u001b[95m 9.008   \u001b[0m | \u001b[95m 20.73   \u001b[0m | \u001b[95m 0.08383 \u001b[0m | \u001b[95m 84.73   \u001b[0m |\n",
      "| \u001b[95m 3       \u001b[0m | \u001b[95m 0.2395  \u001b[0m | \u001b[95m 0.3665  \u001b[0m | \u001b[95m 7.124   \u001b[0m | \u001b[95m 0.735   \u001b[0m | \u001b[95m 9.339   \u001b[0m | \u001b[95m 10.86   \u001b[0m | \u001b[95m 0.07496 \u001b[0m | \u001b[95m 69.75   \u001b[0m |\n",
      "| \u001b[0m 4       \u001b[0m | \u001b[0m 0.1931  \u001b[0m | \u001b[0m 0.2582  \u001b[0m | \u001b[0m 6.198   \u001b[0m | \u001b[0m 0.3632  \u001b[0m | \u001b[0m 4.002   \u001b[0m | \u001b[0m 21.27   \u001b[0m | \u001b[0m 0.007313\u001b[0m | \u001b[0m 67.51   \u001b[0m |\n",
      "| \u001b[95m 5       \u001b[0m | \u001b[95m 0.2441  \u001b[0m | \u001b[95m 0.4278  \u001b[0m | \u001b[95m 6.608   \u001b[0m | \u001b[95m 0.592   \u001b[0m | \u001b[95m 9.649   \u001b[0m | \u001b[95m 10.54   \u001b[0m | \u001b[95m 0.08247 \u001b[0m | \u001b[95m 50.06   \u001b[0m |\n",
      "| \u001b[95m 6       \u001b[0m | \u001b[95m 0.2445  \u001b[0m | \u001b[95m 0.1     \u001b[0m | \u001b[95m 6.0     \u001b[0m | \u001b[95m 0.1     \u001b[0m | \u001b[95m 18.0    \u001b[0m | \u001b[95m 10.0    \u001b[0m | \u001b[95m 0.001   \u001b[0m | \u001b[95m 130.0   \u001b[0m |\n",
      "| \u001b[0m 7       \u001b[0m | \u001b[0m 0.239   \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 10.0    \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 18.0    \u001b[0m | \u001b[0m 25.0    \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 20.0    \u001b[0m |\n",
      "| \u001b[0m 8       \u001b[0m | \u001b[0m 0.2416  \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 10.0    \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 18.0    \u001b[0m | \u001b[0m 25.0    \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 78.65   \u001b[0m |\n",
      "| \u001b[0m 9       \u001b[0m | \u001b[0m 0.2198  \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 6.0     \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 18.0    \u001b[0m | \u001b[0m 10.0    \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 20.32   \u001b[0m |\n",
      "| \u001b[0m 10      \u001b[0m | \u001b[0m 0.1755  \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 6.0     \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 3.0     \u001b[0m | \u001b[0m 25.0    \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 130.0   \u001b[0m |\n",
      "| \u001b[95m 11      \u001b[0m | \u001b[95m 0.2632  \u001b[0m | \u001b[95m 0.1     \u001b[0m | \u001b[95m 6.0     \u001b[0m | \u001b[95m 1.0     \u001b[0m | \u001b[95m 18.0    \u001b[0m | \u001b[95m 10.0    \u001b[0m | \u001b[95m 0.001   \u001b[0m | \u001b[95m 102.4   \u001b[0m |\n",
      "| \u001b[0m 12      \u001b[0m | \u001b[0m 0.1593  \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 10.0    \u001b[0m | \u001b[0m 0.1     \u001b[0m | \u001b[0m 3.0     \u001b[0m | \u001b[0m 10.0    \u001b[0m | \u001b[0m 0.001   \u001b[0m | \u001b[0m 130.0   \u001b[0m |\n",
      "| \u001b[0m 13      \u001b[0m | \u001b[0m 0.2597  \u001b[0m | \u001b[0m 0.8164  \u001b[0m | \u001b[0m 9.906   \u001b[0m | \u001b[0m 0.9293  \u001b[0m | \u001b[0m 17.8    \u001b[0m | \u001b[0m 10.71   \u001b[0m | \u001b[0m 0.005053\u001b[0m | \u001b[0m 43.83   \u001b[0m |\n",
      "| \u001b[95m 14      \u001b[0m | \u001b[95m 0.2638  \u001b[0m | \u001b[95m 0.1     \u001b[0m | \u001b[95m 10.0    \u001b[0m | \u001b[95m 0.9247  \u001b[0m | \u001b[95m 18.0    \u001b[0m | \u001b[95m 24.96   \u001b[0m | \u001b[95m 0.001   \u001b[0m | \u001b[95m 120.4   \u001b[0m |\n",
      "| \u001b[0m 15      \u001b[0m | \u001b[0m 0.2591  \u001b[0m | \u001b[0m 0.3706  \u001b[0m | \u001b[0m 6.184   \u001b[0m | \u001b[0m 0.9301  \u001b[0m | \u001b[0m 17.98   \u001b[0m | \u001b[0m 24.68   \u001b[0m | \u001b[0m 0.01527 \u001b[0m | \u001b[0m 41.24   \u001b[0m |\n",
      "=============================================================================================================\n"
     ]
    }
   ],
   "source": [
    "def bayesion_opt_lgbm(X_train, y_train, init_iter=3, n_iters=7, random_state=11, seed = 42, num_iterations = 100):\n",
    "  dtrain = lgb.Dataset(data=X_train, label=y_train)\n",
    "  def lgb_r2_score(preds, dtrain):\n",
    "      labels = dtrain.get_label()\n",
    "      return 'r2', r2_score(labels, preds), True\n",
    "  # Objective Function\n",
    "  def hyp_lgbm(num_leaves, feature_fraction, bagging_fraction, max_depth, min_split_gain, min_child_weight,bagging_frequency):\n",
    "        \n",
    "          params = {'application':'regression','num_iterations': num_iterations,\n",
    "                 'learning_rate': 0.005, 'early_stopping_round':50,\n",
    "                    'metric':'lgb_r2_score'} # Default parameters\n",
    "          params[\"num_leaves\"] = int(round(num_leaves))\n",
    "          params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n",
    "          params['bagging_fraction'] = max(min(bagging_fraction, 1), 0)\n",
    "          params['max_depth'] = int(round(max_depth))\n",
    "          params['min_split_gain'] = min_split_gain\n",
    "          params['min_child_weight'] = min_child_weight    #ab hier \n",
    "          params['bagging_frequency'] = bagging_frequency  \n",
    "          \n",
    "            \n",
    "          cv_results = lgb.cv(params, dtrain, nfold=5, seed=seed,categorical_feature=[], stratified=False,\n",
    "                              verbose_eval =None, feval=lgb_r2_score)\n",
    "          # print(cv_results)\n",
    "          return np.max(cv_results['r2-mean'])\n",
    "  # Domain space-- Range of hyperparameters \n",
    "  pds = {'num_leaves': (20, 130),\n",
    "            'feature_fraction': (0.1, 1),\n",
    "            'bagging_fraction': (0.1, 1),\n",
    "            'max_depth': (3, 18),\n",
    "            'min_split_gain': (0.001, 0.1),\n",
    "            'min_child_weight': (10, 25),      #ab hier\n",
    "            'bagging_frequency': (6, 10)\n",
    "            \n",
    "            }\n",
    "\n",
    "  # Surrogate model\n",
    "  optimizer = BayesianOptimization(hyp_lgbm, pds, random_state=random_state)\n",
    "                                    \n",
    "  # Optimize\n",
    "  optimizer.maximize(init_points=init_iter, n_iter=n_iters)\n",
    "\n",
    "bayesion_opt_lgbm(X_train, y_train, init_iter=5, n_iters=10, random_state=77, seed = 42, num_iterations = 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bagging_fraction': 0.8072574124060921,\n",
       " 'feature_fraction': 0.18078141341147103,\n",
       " 'max_depth': 12.755270584069136,\n",
       " 'min_child_weight': 30.140033300538796,\n",
       " 'min_split_gain': 0.02734712675336803,\n",
       " 'num_leaves': 45.06287267201995}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimizer.max['params']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Result 2:\n",
    "looks like we´re still getting the same result for our model. Eventhough we changed the range of values that we could use, we are still getting the same values for the optimal hyperparameters. Additionally the sparse data didn´t influence our result. Just made it more efficient for us, because we reduced the data. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# now we can set our parameters down for the evaluation \n",
    "params = {\n",
    "        \"objective\" : \"regression\",\n",
    "        \"metric\" : \"rmse\",\n",
    "        \n",
    "        \"learning_rate\" : 0.005,\n",
    "        \"num_leaves\" : 45,              \n",
    "        \"bagging_fraction\" : 0.8,       \n",
    "        \"feature_fraction\" : 0.18078141341147103,       \n",
    "        \"bagging_frequency\" : 6,        \n",
    "        \"bagging_seed\" : 42,\n",
    "        'max_depth': 13,\n",
    "        'min_split_gain':0.02734712675336803,\n",
    "        'min_child_weight':30\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgb_training = lgb.Dataset(tr_X, label=tr_y)\n",
    "lgb_validation = lgb.Dataset(val_X, label=val_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 500 rounds.\n",
      "[150]\ttraining's rmse: 1.50877\tvalid_1's rmse: 1.52811\n",
      "[300]\ttraining's rmse: 1.36301\tvalid_1's rmse: 1.45518\n",
      "[450]\ttraining's rmse: 1.27025\tvalid_1's rmse: 1.42317\n",
      "[600]\ttraining's rmse: 1.20879\tvalid_1's rmse: 1.41119\n",
      "[750]\ttraining's rmse: 1.15827\tvalid_1's rmse: 1.40663\n",
      "[900]\ttraining's rmse: 1.11865\tvalid_1's rmse: 1.40531\n",
      "[1050]\ttraining's rmse: 1.08673\tvalid_1's rmse: 1.40563\n",
      "[1200]\ttraining's rmse: 1.05975\tvalid_1's rmse: 1.40656\n",
      "[1350]\ttraining's rmse: 1.03566\tvalid_1's rmse: 1.40743\n",
      "Early stopping, best iteration is:\n",
      "[976]\ttraining's rmse: 1.10206\tvalid_1's rmse: 1.40497\n"
     ]
    }
   ],
   "source": [
    "evals_result = {}\n",
    "model = lgb.train(params, lgb_training, num_boost_round=4000, \n",
    "                      valid_sets=[lgb_training, lgb_validation], \n",
    "                      early_stopping_rounds=500, \n",
    "                      verbose_eval=150, \n",
    "                      evals_result=evals_result)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction_lgbt = np.expm1(model.predict(X_test, num_iteration=model.best_iteration)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>000137c73</td>\n",
       "      <td>1.877875e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>00021489f</td>\n",
       "      <td>1.924653e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0004d7953</td>\n",
       "      <td>4.042727e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>00056a333</td>\n",
       "      <td>6.384723e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>00056d8eb</td>\n",
       "      <td>1.924653e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff73b677</td>\n",
       "      <td>1.801985e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff7b5923</td>\n",
       "      <td>6.280993e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff7c698f</td>\n",
       "      <td>1.849742e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fff8dba89</td>\n",
       "      <td>6.045457e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fffbe2f6f</td>\n",
       "      <td>1.933925e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>49342 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 target\n",
       "ID                     \n",
       "000137c73  1.877875e+06\n",
       "00021489f  1.924653e+06\n",
       "0004d7953  4.042727e+06\n",
       "00056a333  6.384723e+06\n",
       "00056d8eb  1.924653e+06\n",
       "...                 ...\n",
       "fff73b677  1.801985e+06\n",
       "fff7b5923  6.280993e+06\n",
       "fff7c698f  1.849742e+06\n",
       "fff8dba89  6.045457e+05\n",
       "fffbe2f6f  1.933925e+06\n",
       "\n",
       "[49342 rows x 1 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_2 = sub\n",
    "sub_2['target'] = prediction_lgbt\n",
    "sub_2 = sub_2.set_index('ID')\n",
    "sub_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub_2.to_csv('Santander_sub8.csv')"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Result of the light gbm:\n",
    "The best result we could achive with the parameter Tuning is private score: 1.41158 and public score: 1.47452. The lightgbm is a very efficient algorithm. It was really intersting working with it. It gives us the possibility to achieve fast results in a very short time, because the Xg-boost lacked in performance. The critical point we have to see is that the light gbm is usually for datasets with over 10000 samples, which we didn´t have, but we had a hughe amount of feautures within the data. Therefore it was really nice. One problem of the light gbm is that it tends to overfitt, therefore it is really hard to find the right parameters. The basayan optimization model was a very good help for us. Really important though is never to forget to think about what you are tuning. I think we found a very good fit in optimization of speed of the lightgbm as well as get the necessary precision and spcialization for our model. I was really scared about choosing a value of the max_depth higher than 10, because the algorithm just tends to overfit but it looks like we found a good mix. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
